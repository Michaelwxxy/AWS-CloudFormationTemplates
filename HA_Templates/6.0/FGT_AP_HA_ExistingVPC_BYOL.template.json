{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "(v4.0) AWS CloudFormation Template to deploy a FGCP based Active-Passive HA solution with two FortiGates",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": ["VPCID", "VPCCIDR", "PublicSubnet", "PrivateSubnet", "HAsyncSubnet", "HAmgmtSubnet"]
				},
				{
					"Label": {
						"default": "FortiGate Instance Configuration"
					},
					"Parameters": ["InstanceType", "CIDRForInstanceAccess", "AZForInstances", "KeyPair", "InitS3Bucket", "InitS3BucketRegion", "FortiGate1LicenseFile", "FortiGate2LicenseFile", "PublicSubnetRouterIP", "PrivateSubnetRouterIP", "HAmgmtSubnetRouterIP"]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for FortiGate 1"
					},
					"Parameters": ["FortiGate1PublicIP", "FortiGate1PrivateIP", "FortiGate1HAsyncIP", "FortiGate1HAmgmtIP"]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for FortiGate 2"
					},
					"Parameters": ["FortiGate2PublicIP", "FortiGate2PrivateIP", "FortiGate2HAsyncIP", "FortiGate2HAmgmtIP"]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for the Cluster"
					},
					"Parameters": ["ClusterPublicIP", "ClusterPrivateIP"]
				}
			]
		}
	},
	"Parameters": {
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "Select the VPC to use"
		},
		"VPCCIDR": {
			"Type": "String",
			"Default": "192.168.0.0/16",
			"Description": "Provide a network CIDR for the VPC"
		},
		"PublicSubnet": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet for the PublicSubnet"
		},
		"PrivateSubnet": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet for the  PrivateSubnet"
		},
		"HAsyncSubnet": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet for the  HAsyncSubnet"
		},
		"HAmgmtSubnet": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet for the  HAmgmtSubnet"
		},
		"PublicSubnetRouterIP": {
			"Type": "String",
			"Default": "192.168.1.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PublicSubnet)"
		},
		"PrivateSubnetRouterIP": {
			"Type": "String",
			"Default": "192.168.2.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PrivateSubnet)"
		},
		"HAmgmtSubnetRouterIP": {
			"Type": "String",
			"Default": "192.168.4.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from HAmgmtSubnet)"
		},
		"FortiGate1PublicIP": {
			"Type": "String",
			"Default": "192.168.1.11/24",
			"Description": "Provide the IP address in CIDR form for the public interface of FortiGate1 (IP from PublicSubnet)"
		},
		"FortiGate2PublicIP": {
			"Type": "String",
			"Default": "192.168.1.12/24",
			"Description": "Provide the IP address in CIDR form for the public interface of FortiGate2 (IP from PublicSubnet)"
		},
		"FortiGate1PrivateIP": {
			"Type": "String",
			"Default": "192.168.2.11/24",
			"Description": "Provide the IP address in CIDR form for the private interface of FortiGate1 (IP from PrivateSubnet)"
		},
		"FortiGate2PrivateIP": {
			"Type": "String",
			"Default": "192.168.2.12/24",
			"Description": "Provide the IP address in CIDR form for the private interface of FortiGate2 (IP from PrivateSubnet)"
		},
		"FortiGate1HAsyncIP": {
			"Type": "String",
			"Default": "192.168.3.11/24",
			"Description": "Provide the IP address in CIDR form for the ha sync interface of FortiGate 1 (IP from HAsyncSubnet)"
		},
		"FortiGate2HAsyncIP": {
			"Type": "String",
			"Default": "192.168.3.12/24",
			"Description": "Provide the IP address in CIDR form for the ha sync interface of FortiGate2 (IP from HAsyncSubnet)"
		},
		"FortiGate1HAmgmtIP": {
			"Type": "String",
			"Default": "192.168.4.11/24",
			"Description": "Provide the IP address in CIDR form for the ha management interface of FortiGate1 (IP from HAmgmtSubnet)"
		},
		"FortiGate2HAmgmtIP": {
			"Type": "String",
			"Default": "192.168.4.12/24",
			"Description": "Provide the IP address in CIDR form for the ha management interface of FortiGate2 (IP from HAmgmtSubnet)"
		},
		"ClusterPublicIP": {
			"Type": "String",
			"Default": "192.168.1.13/24",
			"Description": "Provide the IP address in CIDR form for the public interface of the Cluster (IP from PublicSubnet)"
		},
		"ClusterPrivateIP": {
			"Type": "String",
			"Default": "192.168.2.13/24",
			"Description": "Provide the IP address in CIDR form for the private interface of the Cluster (IP from PrivateSubnet)"
		},
		"InstanceType": {
			"Type": "String",
			"Default": "c5.xlarge",
			"Description": "Select the instance type for the FortiGates",
			"AllowedValues": [
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"c5.18xlarge",
				"c5n.xlarge",
				"c5n.2xlarge",
				"c5n.4xlarge",
				"c5n.9xlarge",
				"c5n.18xlarge"
			]
		},
		"CIDRForInstanceAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Provide a network CIDR from which the FortiGate instances will be accessed"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select a keypair to associate with the FortiGates"
		},
		"AZForInstances": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select an Availability Zone for the FortiGates"
		},
		"InitS3Bucket": {
			"Type": "String",
			"MinLength" : "1",
			"Description": "Provide the Init S3 Bucket name, where your license files and config files exists"
		},
		"InitS3BucketRegion": {
			"Type": "String",
			"Description": "Select the Region where the Init S3 Bucket exists",
			"AllowedValues": [
				"ap-northeast-1",
				"ap-northeast-2",
				"ap-south-1",
				"ap-southeast-1",
				"ap-southeast-2",
				"ca-central-1",
				"eu-central-1",
				"eu-west-1",
				"eu-west-2",
				"eu-west-3",
				"sa-east-1",
				"us-east-1",
				"us-east-2",
				"us-west-1",
				"us-west-2"
			]
		},
		"FortiGate1LicenseFile": {
			"Type": "String",
			"MinLength" : "1",
			"Description": "Provide the name of the license file in the Init S3 Bucket for FortiGate1 (ie fgt1.lic or prefix/fgt1.lic)"
		},
		"FortiGate2LicenseFile": {
			"Type": "String",
			"MinLength" : "1",
			"Description": "Provide the name of the license file in the Init S3 Bucket for FortiGate2 (ie fgt2.lic or prefix/fgt2.lic)"
		}
	},
	"Mappings": {
		"RegionMap": {
			"ap-northeast-1": {
				"fgtami": "ami-021c40c8d7d07a99a"
			},
			"ap-northeast-2": {
				"fgtami": "ami-09c6e2b31c5aeeef5"
			},
			"ap-south-1": {
				"fgtami": "ami-066e2d633f25457cf"
			},
			"ap-southeast-1": {
				"fgtami": "ami-0b09627a8727a840e"
			},
			"ap-southeast-2": {
				"fgtami": "ami-03812d85cf5ab60b6"
			},
			"ca-central-1": {
				"fgtami": "ami-0e2dfde704479020d"
			},
			"eu-central-1": {
				"fgtami": "ami-084fbc093774e3d55"
			},
			"eu-west-1": {
				"fgtami": "ami-01e8b02ab1ac6f0be"
			},
			"eu-west-2": {
				"fgtami": "ami-0fee8ad3dbfdc59f7"
			},
			"eu-west-3": {
				"fgtami": "ami-01f28c942780fe93d"
			},
			"sa-east-1": {
				"fgtami": "ami-0e2e26cbaae02e210"
			},
			"us-east-1": {
				"fgtami": "ami-0545ab5cfcb04ae1f"
			},
			"us-east-2": {
				"fgtami": "ami-06c0b5327ae077f9b"
			},
			"us-west-1": {
				"fgtami": "ami-0a2dd80d792806156"
			},
			"us-west-2": {
				"fgtami": "ami-0e02bbdf523a30000"
			}
		}
	},
	"Resources": {
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["ec2.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "ApplicationPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"ec2:Describe*",
								"ec2:AssociateAddress",
								"ec2:AssignPrivateIpAddresses",
								"ec2:UnassignPrivateIpAddresses",
								"ec2:ReplaceRoute",
								"s3:GetObject"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "InstanceRole"
				}]
			}
		},
		"FortiGateSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "FortigateSecGrp",
				"SecurityGroupIngress": [{
						"Description": "Allow remote access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForInstanceAccess"
						}
					},
					{
						"Description": "Allow local VPC access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					}
				]
			}
		},
		"FortiGateSecGrpHArule": {
			"DependsOn": "FortiGateSecGrp",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FortiGateSecGrp"
				},
				"Description": "Allow FGTs to access each other",
				"IpProtocol": "-1",
				"FromPort": "0",
				"ToPort": "65535",
				"SourceSecurityGroupId": {
					"Ref": "FortiGateSecGrp"
				}
			}
		},
		"Fgt1": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "fgtami"]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"NetworkInterfaces": [{
						"NetworkInterfaceId": {
							"Ref": "fgt1eni0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "fgt1eni1"
						},
						"DeviceIndex": "1"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "fgt1eni2"
						},
						"DeviceIndex": "2"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "fgt1eni3"
						},
						"DeviceIndex": "3"
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-FortiGate1"
							]
						]
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"{\n",
							"\"bucket\"", " : \"", {
								"Ref": "InitS3Bucket"
							}, "\"", ",\n",
							"\"region\"", " : ", "\"", {
								"Ref": "InitS3BucketRegion"
							}, "\"", ",\n",
							"\"license\"", " : ", "\"", "/", {
								"Ref": "FortiGate1LicenseFile"
							}, "\"", ",\n",
							"\"config\"", " : ", "\"", "/fgt1.txt\"", "\n",
							"}"
						]]
					}
				}
			}
		},
		"Fgt2": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "fgtami"]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"NetworkInterfaces": [{
						"NetworkInterfaceId": {
							"Ref": "fgt2eni0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "fgt2eni1"
						},
						"DeviceIndex": "1"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "fgt2eni2"
						},
						"DeviceIndex": "2"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "fgt2eni3"
						},
						"DeviceIndex": "3"
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-FortiGate2"
							]
						]
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"{\n",
							"'bucket' : '", {
								"Ref": "InitS3Bucket"
							}, "',\n",
							"'region' : '", {
								"Ref": "InitS3BucketRegion"
							}, "',\n",
							"'license' : '/", {
								"Ref": "FortiGate2LicenseFile"
							}, "',\n",
							"'config' : '/fgt2.txt'\n",
							"}"
						]]
					}
				}
			}
		},
		"fgt1eni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [{
					"Ref": "FortiGateSecGrp"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSubnet"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-fgt1eni0"
							]
						]
					}
				}, {
					"Key": "Interface",
					"Value": "eth0"
				}],
				"PrivateIpAddresses": [{
						"PrivateIpAddress": {
							"Fn::Select": ["0", {
								"Fn::Split": ["/", {
									"Ref": "FortiGate1PublicIP"
								}]
							}]
						},
						"Primary": "true"
					},
					{
						"PrivateIpAddress": {
							"Fn::Select": ["0", {
								"Fn::Split": ["/", {
									"Ref": "ClusterPublicIP"
								}]
							}]
						},
						"Primary": "false"
					}
				]
			}
		},
		"fgt2eni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [{
					"Ref": "FortiGateSecGrp"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSubnet"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-fgt2eni0"
							]
						]
					}
				}, {
					"Key": "Interface",
					"Value": "eth0"
				}],
				"PrivateIpAddress": {
					"Fn::Select": ["0", {
						"Fn::Split": ["/", {
							"Ref": "FortiGate2PublicIP"
						}]
					}]
				}
			}
		},
		"ClusterEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "Fgt1"
		},
		"Fgt1EIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "Fgt1"
		},
		"Fgt2EIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "Fgt2"
		},
		"ClusterIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["ClusterEIP", "AllocationId"]
				},
				"NetworkInterfaceId": {
					"Ref": "fgt1eni0"
				},
				"PrivateIpAddress": {
					"Fn::Select": ["0", {
						"Fn::Split": ["/", {
							"Ref": "ClusterPublicIP"
						}]
					}]
				}
			},
			"DependsOn": "ClusterEIP"
		},
		"fgt1eni1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [{
					"Ref": "FortiGateSecGrp"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-fgt1eni1"
							]
						]
					}
				}],
				"PrivateIpAddresses": [{
						"PrivateIpAddress": {
							"Fn::Select": ["0", {
								"Fn::Split": ["/", {
									"Ref": "FortiGate1PrivateIP"
								}]
							}]
						},
						"Primary": "true"
					},
					{
						"PrivateIpAddress": {
							"Fn::Select": ["0", {
								"Fn::Split": ["/", {
									"Ref": "ClusterPrivateIP"
								}]
							}]
						},
						"Primary": "false"
					}
				]
			}
		},
		"fgt2eni1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [{
					"Ref": "FortiGateSecGrp"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSubnet"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-fgt2eni1"
							]
						]
					}
				}],
				"PrivateIpAddress": {
					"Fn::Select": ["0", {
						"Fn::Split": ["/", {
							"Ref": "FortiGate2PrivateIP"
						}]
					}]
				}
			}
		},
		"fgt1eni2": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port3",
				"GroupSet": [{
					"Ref": "FortiGateSecGrp"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "HAsyncSubnet"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-fgt1eni2"
							]
						]
					}
				}],
				"PrivateIpAddress": {
					"Fn::Select": ["0", {
						"Fn::Split": ["/", {
							"Ref": "FortiGate1HAsyncIP"
						}]
					}]
				}
			}
		},
		"fgt1eni3": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port4",
				"GroupSet": [{
					"Ref": "FortiGateSecGrp"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "HAmgmtSubnet"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-fgt1eni3"
							]
						]
					}
				}],
				"PrivateIpAddress": {
					"Fn::Select": ["0", {
						"Fn::Split": ["/", {
							"Ref": "FortiGate1HAmgmtIP"
						}]
					}]
				}
			}
		},
		"fgt2eni2": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port3",
				"GroupSet": [{
					"Ref": "FortiGateSecGrp"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "HAsyncSubnet"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-fgt2eni2"
							]
						]
					}
				}],
				"PrivateIpAddress": {
					"Fn::Select": ["0", {
						"Fn::Split": ["/", {
							"Ref": "FortiGate2HAsyncIP"
						}]
					}]
				}
			}
		},
		"fgt2eni3": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port4",
				"GroupSet": [{
					"Ref": "FortiGateSecGrp"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "HAmgmtSubnet"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-fgt2eni3"
							]
						]
					}
				}],
				"PrivateIpAddress": {
					"Fn::Select": ["0", {
						"Fn::Split": ["/", {
							"Ref": "FortiGate2HAmgmtIP"
						}]
					}]
				}
			}
		},
		"Fgt1EIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["Fgt1EIP", "AllocationId"]
				},
				"NetworkInterfaceId": {
					"Ref": "fgt1eni3"
				},
				"PrivateIpAddress": {
					"Fn::Select": ["0", {
						"Fn::Split": ["/", {
							"Ref": "FortiGate1HAmgmtIP"
						}]
					}]
				}
			},
			"DependsOn": "Fgt1EIP"
		},
		"Fgt2EIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["Fgt2EIP", "AllocationId"]
				},
				"NetworkInterfaceId": {
					"Ref": "fgt2eni3"
				},
				"PrivateIpAddress": {
					"Fn::Select": ["0", {
						"Fn::Split": ["/", {
							"Ref": "FortiGate2HAmgmtIP"
						}]
					}]
				}
			},
			"DependsOn": "Fgt2EIP"
		},
		"LambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "S3AccessRole",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
								"Effect": "Allow",
								"Action": [
									"s3:PutObject"
								],
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": [
									"logs:*"
								],
								"Resource": "*"
							}
						]
					}
				}]
			}
		},
		"InitFunction": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": "LambdaRole",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": ["\n", [
							"import ast",
							"import boto3",
							"import cfnresponse",
							"import json",
							"import logging",
							"logger = logging.getLogger()",
							"logger.setLevel(logging.INFO)",
							"s3 = boto3.client('s3')",
							"",
							"template = '''\\",
							"config system global",
							"set hostname {Hostname}",
							"set admintimeout 60",
							"end",
							"config system interface",
							"edit port1",
							"set alias public",
							"set mode static",
							"set ip {Port1IP}",
							"set allowaccess ping https ssh fgfm",
							"next",
							"edit port2",
							"set alias private",
							"set mode static",
							"set ip {Port2IP}",
							"set allowaccess ping",
							"set mtu-override enable",
							"set mtu 9001",
							"next",
							"edit port3",
							"set alias hasync",
							"set mode static",
							"set ip {Port3IP}",
							"set allowaccess ping",
							"set mtu-override enable",
							"set mtu 9001",
							"next",
							"edit port4",
							"set alias hamgmt",
							"set mode static",
							"set ip {Port4IP}",
							"set allowaccess ping https ssh",
							"set mtu-override enable",
							"set mtu 9001",
							"next",
							"end",
							"config router static",
							"edit 1",
							"set device port1",
							"set gateway {PublicSubnetRouterIP}",
							"next",
							"edit 2",
							"set dst {VPCCIDR}",
							"set device port2",
							"set gateway {PrivateSubnetRouterIP}",
							"next",
							"end",
							"config firewall policy",
							"edit 1",
							"set name outbound-all",
							"set srcintf port2",
							"set dstintf port1",
							"set srcaddr all",
							"set dstaddr all",
							"set action accept",
							"set schedule always",
							"set service ALL",
							"set logtraffic all",
							"set nat enable",
							"next",
							"end",
							"config system ha",
							"set group-name group1",
							"set mode a-p",
							"set hbdev port3 50",
							"set session-pickup enable",
							"set ha-mgmt-status enable",
							"config ha-mgmt-interface",
							"edit 1",
							"set interface port4",
							"set gateway {HAmgmtSubnetRouterIP}",
							"next",
							"end",
							"set override disable",
							"set priority {HApriority}",
							"set unicast-hb enable",
							"set unicast-hb-peerip {HApeer}",
							"end\\",
							"'''",
							"",
							"def handler(event, context):",
							"    dict1 = ast.literal_eval(event['ResourceProperties']['FGT1Info'])",
							"    dict2 = ast.literal_eval(event['ResourceProperties']['FGT2Info'])",
							"    fgt1_conf = template.format(**dict1)",
							"    fgt2_conf = template.format(**dict2)",
							"    fgt1_result = False",
							"    fgt2_result = False",
							"    logger.info('<-- event received: {}'.format(json.dumps(event)))",
							"",
							"    try:",
							"        resp = s3.put_object(Body=fgt1_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgt1.txt')",
							"    except Exception as error:",
							"        logger.error('<--!! Exception: {}'.format(error))",
							"        responseData = {'msg':'error'}",
							"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
							"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
							"        fgt1_result = True",
							"        logger.info('<-- s3 put_object fgt1.txt successful')",
							"",
							"    try:",
							"        resp = s3.put_object(Body=fgt2_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgt2.txt')",
							"    except Exception as error:",
							"        logger.error('<--!! Exception: {}'.format(error))",
							"        responseData = {'msg':'error'}",
							"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
							"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
							"        fgt2_result = True",
							"        logger.info('<-- s3 put_object fgt2.txt successful')",
							"",
							"    if fgt1_result is True and fgt2_result is True:",
							"        responseData = {'msg':'200'}",
							"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
							"    else:",
							"        responseData = {'msg':'error'}",
							"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
							""
						]]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python2.7",
				"MemorySize": 128
			}
		},
		"RunInitFunction": {
			"Type": "Custom::InitFunction",
			"DependsOn": "InitFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitFunction",
						"Arn"
					]
				},
				"S3Bucket": {
					"Ref": "InitS3Bucket"
				},
				"FGT1Info": {
					"Fn::Join": [
						"", ["{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'HAmgmtSubnetRouterIP':'",
							{
								"Ref": "HAmgmtSubnetRouterIP"
							},
							"',",
							"'PublicSubnetRouterIP':'",
							{
								"Ref": "PublicSubnetRouterIP"
							},
							"',",
							"'PrivateSubnetRouterIP':'",
							{
								"Ref": "PrivateSubnetRouterIP"
							},
							"',",
							"'Port1IP':'",
							{
								"Ref": "ClusterPublicIP"
							},
							"',",
							"'Port2IP':'",
							{
								"Ref": "ClusterPrivateIP"
							},
							"',",
							"'Port3IP':'",
							{
								"Ref": "FortiGate1HAsyncIP"
							},
							"',",
							"'Port4IP':'",
							{
								"Ref": "FortiGate1HAmgmtIP"
							},
							"',",
							"'HApeer':'",
							{
								"Fn::Select": ["0", {
									"Fn::Split": ["/", {
										"Ref": "FortiGate2HAsyncIP"
									}]
								}]
							},
							"',",
							"'HApriority':'255',",
							"'Hostname':'Fgt1'",
							"}"
						]
					]
				},
				"FGT2Info": {
					"Fn::Join": [
						"", ["{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'HAmgmtSubnetRouterIP':'",
							{
								"Ref": "HAmgmtSubnetRouterIP"
							},
							"',",
							"'PublicSubnetRouterIP':'",
							{
								"Ref": "PublicSubnetRouterIP"
							},
							"',",
							"'PrivateSubnetRouterIP':'",
							{
								"Ref": "PrivateSubnetRouterIP"
							},
							"',",
							"'Port1IP':'",
							{
								"Ref": "FortiGate2PublicIP"
							},
							"',",
							"'Port2IP':'",
							{
								"Ref": "FortiGate2PrivateIP"
							},
							"',",
							"'Port3IP':'",
							{
								"Ref": "FortiGate2HAsyncIP"
							},
							"',",
							"'Port4IP':'",
							{
								"Ref": "FortiGate2HAmgmtIP"
							},
							"',",
							"'HApeer':'",
							{
								"Fn::Select": ["0", {
									"Fn::Split": ["/", {
										"Ref": "FortiGate1HAsyncIP"
									}]
								}]
							},
							"',",
							"'HApriority':'1',",
							"'Hostname':'Fgt2'",
							"}"
						]
					]
				}
			}
		}
	},
	"Outputs": {
		"Username": {
			"Value": "admin",
			"Description": "Username for the Fortigates"
		},
		"Password": {
			"Value": {
				"Ref": "Fgt1"
			},
			"Description": "Initial password for the FortiGates"
		},
		"ClusterLoginURL": {
			"Value": {
				"Fn::Join": [
					"", [
						"https://", {
							"Ref": "ClusterEIP"
						}
					]
				]
			},
			"Description": "Login URL for the public interface of the active FortiGate"
		},
		"FortiGate1LoginURL": {
			"Value": {
				"Fn::Join": [
					"", [
						"https://", {
							"Ref": "Fgt1EIP"
						}
					]
				]
			},
			"Description": "Login URL for the HAmgmt interface of FortiGate 1"
		},
		"FortiGate2LoginURL": {
			"Value": {
				"Fn::Join": [
					"", [
						"https://", {
							"Ref": "Fgt2EIP"
						}
					]
				]
			},
			"Description": "Login URL for the HAmgmt interface of FortiGate 2"
		}
	}
}
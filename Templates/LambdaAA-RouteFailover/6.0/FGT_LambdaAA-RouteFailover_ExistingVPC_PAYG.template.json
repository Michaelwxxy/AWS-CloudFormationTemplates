{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Launch two FortiGates with a Lambda Function and API Gateway based Health Check solution",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": [
						"VPCID",
						"VPCCIDR",
						"PublicSubnet1",
						"PrivateSubnet1",
						"PublicSubnet2",
						"PrivateSubnet2"
					]
				},
				{
					"Label": {
						"default": "FortiGate Instance Configuration"
					},
					"Parameters": [
						"AZForFGTA",
						"AZForFGTB",
						"FGTInstanceType",
						"CIDRForFGTAccess",
						"KeyPair"

					]
				},
				{
					"Label": {
						"default": "Lambda Configuration"
					},
					"Parameters": [
						"LambdaHealthCheckPort"
					]
				},
				{
					"Label": {
						"default": "External ELBv2 Configuration"
					},
					"Parameters": [
						"LoadbalancerType",
						"ListenerPort"
					]
				}
			]
		}
	},
	"Parameters": {
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "Select the VPC to deploy the Lambda function and FortiGates within"
		},
		"VPCCIDR": {
			"Type": "String",
			"Default": "192.168.0.0/16",
			"Description": "Enter the VPC CIDR that you are using"
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the Public1 subnet"
		},
		"PrivateSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the Private1 subnet"
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the Public2 subnet"
		},
		"PrivateSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the Private2 subnet"
		},
		"AZForFGTA": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select the first AZ for FortiGateA"
		},
		"AZForFGTB": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select the second AZ for FortiGateB"
		},
		"FGTInstanceType": {
			"Type": "String",
			"Default": "c4.large",
			"Description": "Select the instance type for the FortiGates",
			"AllowedValues": [
				"t2.small",
				"c4.large",
				"c4.xlarge",
				"c4.2xlarge",
				"c4.4xlarge",
				"c4.8xlarge",
				"c5.large",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge"
			]
		},
		"CIDRForFGTAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Enter the CIDR from which FortiGate instances need to be accessed from"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select the keypair for the FortiGates"
		},
		"LambdaHealthCheckPort": {
			"Type": "String",
			"Description": "Enter the health check port that will be monitored by Lambda",
			"Default": "541"
		},
		"LoadbalancerType": {
			"Type": "String",
			"Default": "None",
			"Description": "Select the external AWS load balancer type if desired",
			"AllowedValues": [
				"None",
				"NLB",
				"ALB"
			]
		},
		"ListenerPort": {
			"Type": "Number",
			"Default": "80",
			"Description": "Enter the listener port for the external ELB"
		}
	},
	"Mappings": {
		"RegionMap": {
			"us-east-1": {
				"LambdaCode": "fortibucket-us-east-1",
				"fgtami": "ami-0426217b"
			},
			"us-east-2": {
				"LambdaCode": "fortibucket-us-east-2",
				"fgtami": "ami-a94c76cc"
			},
			"eu-west-1": {
				"LambdaCode": "fortibucket-eu-west-1",
				"fgtami": "ami-17e0f9fd"
			},
			"eu-west-2": {
				"LambdaCode": "fortibucket-eu-west-2",
				"fgtami": "ami-5ca64c3b"
			},
			"eu-west-3": {
				"LambdaCode": "fortibucket-eu-west-3",
				"fgtami": "ami-2d883850"
			},
			"eu-central-1": {
				"LambdaCode": "fortibucket-eu-central-1",
				"fgtami": "ami-89161662"
			},
			"ap-northeast-1": {
				"LambdaCode": "fortibucket-ap-northeast-1",
				"fgtami": "ami-ff4b2012"
			},
			"ap-northeast-2": {
				"LambdaCode": "fortibucket-ap-northeast-2",
				"fgtami": "ami-b89720d6"
			},
			"ap-southeast-1": {
				"LambdaCode": "fortibucket-ap-southeast-1",
				"fgtami": "ami-b546025f"
			},
			"ap-southeast-2": {
				"LambdaCode": "fortibucket-ap-southeast-2",
				"fgtami": "ami-35be1957"
			},
			"ap-south-1": {
				"LambdaCode": "fortibucket-ap-south-1",
				"fgtami": "ami-ce0033a1"
			},
			"sa-east-1": {
				"LambdaCode": "fortibucket-sa-east-1",
				"fgtami": "ami-438fa92f"
			},
			"us-west-1": {
				"LambdaCode": "fortibucket-us-west-1",
				"fgtami": "ami-408e6323"
			},
			"us-west-2": {
				"LambdaCode": "fortibucket-us-west-2",
				"fgtami": "ami-42dc833a"
			},
			"ca-central-1": {
				"LambdaCode": "fortibucket-ca-central-1",
				"fgtami": "ami-05911c61"
			}
		}
	},
	"Conditions": {
		"CreateExternalNLB": {
			"Fn::Equals": [{
					"Ref": "LoadbalancerType"
				},
				"NLB"
			]
		},
		"CreateExternalALB": {
			"Fn::Equals": [{
					"Ref": "LoadbalancerType"
				},
				"ALB"
			]
		}
	},
	"Resources": {
		"FGTSecGrpBase": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "FGTSecGrp",
				"SecurityGroupIngress": [{
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForFGTAccess"
						}
					},
					{
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					}
				]
			}
		},
		"FGTSecGrpFGTRule": {
			"DependsOn": "FGTSecGrpBase",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FGTSecGrpBase"
				},
				"IpProtocol": "-1",
				"FromPort": "0",
				"ToPort": "65535",
				"SourceSecurityGroupId": {
					"Ref": "FGTSecGrpBase"
				}
			}
		},
		"FGTSecGrpHealthCheckrule": {
			"DependsOn": "FGTSecGrpBase",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FGTSecGrpBase"
				},
				"IpProtocol": "tcp",
				"FromPort": {
					"Ref": "LambdaHealthCheckPort"
				},
				"ToPort": {
					"Ref": "LambdaHealthCheckPort"
				},
				"SourceSecurityGroupId": {
					"Ref": "LambdaSecGrp"
				}
			}
		},
		"FGTSecGrpALBRule": {
			"DependsOn": "FGTSecGrpBase",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Condition": "CreateExternalALB",
			"Properties": {
				"GroupId": {
					"Ref": "FGTSecGrpBase"
				},
				"IpProtocol": "-1",
				"FromPort": "0",
				"ToPort": "65535",
				"SourceSecurityGroupId": {
					"Ref": "ALBSecGrp"
				}
			}
		},
		"FGTSecGrpNLBRule": {
			"DependsOn": "FGTSecGrpBase",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Condition": "CreateExternalNLB",
			"Properties": {
				"GroupId": {
					"Ref": "FGTSecGrpBase"
				},
				"IpProtocol": "tcp",
				"FromPort": {
					"Ref": "ListenerPort"
				},
				"ToPort": {
					"Ref": "ListenerPort"
				},
				"CidrIp": "0.0.0.0/0"
			}
		},
		"FgtA": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "fgtami"]
				},
				"InstanceType": {
					"Ref": "FGTInstanceType"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"NetworkInterfaces": [{
						"NetworkInterfaceId": {
							"Ref": "FGTAENI0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTAENI1"
						},
						"DeviceIndex": "1"
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-FgtA"
							]
						]
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["\n", [
							"config system global",
							"set hostname FgtA",
							"set admintimeout 60",
							"end",
							"config system interface",
							"edit port1",
							"set alias public",
							"set allowaccess https ssh fgfm",
							"next",
							"edit port2",
							"set alias private",
							"set mode dhcp",
							"set defaultgw disable",
							"set dns-server-override disable",
							"set allowaccess ping fgfm",
							"next",
							"end",
							"config router static",
							"edit 0",
							{
								"Fn::Sub": "set dst ${VPCCIDR}"
							},
							"set device port2",
							"set dynamic-gateway enable",
							"next",
							"end",
							"config system automation-trigger",
							"edit healthcheck-trigger",
							"set event-type event-log",
							"set logid 22922",
							"next",
							"end",
							"config system automation-action",
							"edit healthcheck-action",
							"set action-type aws-lambda",
							"set aws-api-path healthcheck",
							"set aws-api-stage prod",
							{
								"Fn::Sub": "set aws-region ${AWS::Region}"
							},
							{
								"Fn::Sub": "set aws-api-id ${HealthCheckAPI}"
							},
							{
								"Fn::Sub": "set aws-api-key ${HealthCheckAPIKey}"
							},
							"next",
							"end",
							"config system automation-stitch",
							"edit healthcheck-stitch",
							"set trigger healthcheck-trigger",
							"set action healthcheck-action",
							"next",
							"end",
							"config system link-monitor",
							"edit fgt-peer",
							"set srcintf port2",
							{
								"Fn::Sub": ["set server ${peerip}", {
									"peerip": {
										"Fn::GetAtt": ["FGTBENI1", "PrimaryPrivateIpAddress"]
									}
								}]
							},
							"set update-cascade-interface disable",
							"set update-static-route disable",
							"next",
							"end"
						]]
					}
				}
			}
		},
		"FgtB": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "fgtami"]
				},
				"InstanceType": {
					"Ref": "FGTInstanceType"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"NetworkInterfaces": [{
						"NetworkInterfaceId": {
							"Ref": "FGTBENI0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTBENI1"
						},
						"DeviceIndex": "1"
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-FgtB"
							]
						]
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["\n", [
							"config system global",
							"set hostname FgtB",
							"set admintimeout 60",
							"end",
							"config system interface",
							"edit port1",
							"set alias public",
							"set allowaccess https ssh fgfm",
							"next",
							"edit port2",
							"set alias private",
							"set mode dhcp",
							"set defaultgw disable",
							"set dns-server-override disable",
							"set allowaccess ping fgfm",
							"next",
							"end",
							"config router static",
							"edit 0",
							{
								"Fn::Sub": "set dst ${VPCCIDR}"
							},
							"set device port2",
							"set dynamic-gateway enable",
							"next",
							"end",
							"config system automation-trigger",
							"edit healthcheck-trigger",
							"set event-type event-log",
							"set logid 22922",
							"next",
							"end",
							"config system automation-action",
							"edit healthcheck-action",
							"set action-type aws-lambda",
							"set aws-api-path healthcheck",
							"set aws-api-stage prod",
							{
								"Fn::Sub": "set aws-region ${AWS::Region}"
							},
							{
								"Fn::Sub": "set aws-api-id ${HealthCheckAPI}"
							},
							{
								"Fn::Sub": "set aws-api-key ${HealthCheckAPIKey}"
							},
							"next",
							"end",
							"config system automation-stitch",
							"edit healthcheck-stitch",
							"set trigger healthcheck-trigger",
							"set action healthcheck-action",
							"next",
							"end",
							"config system link-monitor",
							"edit fgt-peer",
							"set srcintf port2",
							{
								"Fn::Sub": ["set server ${peerip}", {
									"peerip": {
										"Fn::GetAtt": ["FGTAENI1", "PrimaryPrivateIpAddress"]
									}
								}]
							},
							"set update-cascade-interface disable",
							"set update-static-route disable",
							"next",
							"end"
						]]
					}
				}
			}
		},
		"FGTAENI0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [{
					"Ref": "FGTSecGrpBase"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"FgtAENI0"
							]
						]
					}
				}, {
					"Key": "Interface",
					"Value": "eth0"
				}]
			}
		},
		"FGTBENI0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [{
					"Ref": "FGTSecGrpBase"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"FgtBENI0"
							]
						]
					}
				}, {
					"Key": "Interface",
					"Value": "eth0"
				}]
			}
		},
		"FGTAENI1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [{
					"Ref": "FGTSecGrpBase"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"FgtAENI1"
							]
						]
					}
				}]
			}
		},
		"FGTBENI1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [{
					"Ref": "FGTSecGrpBase"
				}],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"FgtBENI1"
							]
						]
					}
				}]
			}
		},
		"FgtAEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "FgtA"
		},
		"FgtBEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "FgtB"
		},
		"FgtAEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["FgtAEIP", "AllocationId"]
				},
				"NetworkInterfaceId": {
					"Ref": "FGTAENI0"
				}
			},
			"DependsOn": "FgtAEIP"
		},
		"FgtBEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["FgtBEIP", "AllocationId"]
				},
				"NetworkInterfaceId": {
					"Ref": "FGTBENI0"
				}
			},
			"DependsOn": "FgtBEIP"
		},
		"AZ1PrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-AZ1PrivateRouteTable"
							]
						]
					}
				}]
			}
		},
		"AZ1Route": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "AZ1PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NetworkInterfaceId": {
					"Ref": "FGTAENI1"
				}
			}
		},
		"AZ1SubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"RouteTableId": {
					"Ref": "AZ1PrivateRouteTable"
				}
			}
		},
		"AZ2PrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-AZ2PrivateRouteTable"
							]
						]
					}
				}]
			}
		},
		"AZ2Route": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "AZ2PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NetworkInterfaceId": {
					"Ref": "FGTBENI1"
				}
			}
		},
		"AZ2SubnetRouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"RouteTableId": {
					"Ref": "AZ2PrivateRouteTable"
				}
			}
		},
		"VPCEndpointEC2": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Properties": {
				"VpcEndpointType": "Interface",
				"PrivateDnsEnabled": true,
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIds": [{
					"Ref": "LambdaSecGrp"
				}],
				"SubnetIds": [{
					"Ref": "PrivateSubnet1"
				}, {
					"Ref": "PrivateSubnet2"
				}],
				"ServiceName": {
					"Fn::Join": ["", ["com.amazonaws.", {
						"Ref": "AWS::Region"
					}, ".ec2"]]
				}
			}
		},
		"ExternalNLB": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Condition": "CreateExternalNLB",
			"Properties": {
				"Name": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-ExternalNLB"
						]
					]
				},
				"Scheme": "internet-facing",
				"Subnets": [{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"Type": "network",
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-ExternalNLB"
							]
						]
					}
				}]
			}
		},
		"ExtNLBGrp": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Condition": "CreateExternalNLB",
			"Properties": {
				"Name": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-ExtNLBGrp"
						]
					]
				},
				"Port": {
					"Ref": "ListenerPort"
				},
				"Protocol": "TCP",
				"HealthCheckProtocol": "TCP",
				"HealthCheckPort": "541",
				"TargetType": "instance",
				"Targets": [{
						"Id": {
							"Ref": "FgtA"
						},
						"Port": {
							"Ref": "ListenerPort"
						}
					},
					{
						"Id": {
							"Ref": "FgtB"
						},
						"Port": {
							"Ref": "ListenerPort"
						}
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-ExtNLBGrp"
							]
						]
					}
				}],
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},
		"ExternalNLBListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Condition": "CreateExternalNLB",
			"Properties": {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": {
						"Ref": "ExtNLBGrp"
					}
				}],
				"LoadBalancerArn": {
					"Ref": "ExternalNLB"
				},
				"Port": {
					"Ref": "ListenerPort"
				},
				"Protocol": "TCP"
			}
		},
		"ALBSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Condition": "CreateExternalALB",
			"Properties": {
				"GroupDescription": "ALBSecGrp",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "-1",
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},
		"ExternalALB": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Condition": "CreateExternalALB",
			"Properties": {
				"Name": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-ExternalALB"
						]
					]
				},
				"Scheme": "internet-facing",
				"Subnets": [{
						"Ref": "PublicSubnet1"
					},
					{
						"Ref": "PublicSubnet2"
					}
				],
				"SecurityGroups": [{
					"Ref": "ALBSecGrp"
				}],
				"Type": "application",
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-ExternalALB"
							]
						]
					}
				}]
			}
		},
		"ExtALBGrp": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Condition": "CreateExternalALB",
			"Properties": {
				"Name": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-ExtALBGrp"
						]
					]
				},
				"Port": {
					"Ref": "ListenerPort"
				},
				"Protocol": "HTTP",
				"HealthCheckProtocol": "HTTPS",
				"HealthCheckPath": "/login",
				"HealthCheckPort": "443",
				"TargetType": "instance",
				"Targets": [{
						"Id": {
							"Ref": "FgtA"
						},
						"Port": {
							"Ref": "ListenerPort"
						}
					},
					{
						"Id": {
							"Ref": "FgtB"
						},
						"Port": {
							"Ref": "ListenerPort"
						}
					}
				],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							"", [{
									"Ref": "AWS::StackName"
								},
								"-ExtALBGrp"
							]
						]
					}
				}],
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},
		"ExternalALBListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Condition": "CreateExternalALB",
			"Properties": {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": {
						"Ref": "ExtALBGrp"
					}
				}],
				"LoadBalancerArn": {
					"Ref": "ExternalALB"
				},
				"Port": {
					"Ref": "ListenerPort"
				},
				"Protocol": "HTTP"
			}
		},
		"HealthCheckAPI": {
			"Type": "AWS::ApiGateway::RestApi",
			"Properties": {
				"Name": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-HealthCheckAPI"
						]
					]
				},
				"Description": "API used for health check requests",
				"ApiKeySourceType": "HEADER",
				"FailOnWarnings": true
			}
		},
		"HealthCheckAPIAccount": {
			"Type": "AWS::ApiGateway::Account",
			"Properties": {
				"CloudWatchRoleArn": {
					"Fn::GetAtt": ["HealthCheckAPIRole", "Arn"]
				}
			}
		},
		"HealthCheckAPIDeployment": {
			"Type": "AWS::ApiGateway::Deployment",
			"DependsOn": ["HealthCheckAPIMethodPOST"],
			"Properties": {
				"RestApiId": {
					"Ref": "HealthCheckAPI"
				},
				"StageName": "prod"
			}
		},
		"HealthCheckAPIResource": {
			"Type": "AWS::ApiGateway::Resource",
			"Properties": {
				"RestApiId": {
					"Ref": "HealthCheckAPI"
				},
				"ParentId": {
					"Fn::GetAtt": ["HealthCheckAPI", "RootResourceId"]
				},
				"PathPart": "healthcheck"
			}
		},
		"HealthCheckAPIMethodPOST": {
			"DependsOn": "PermissionForAPIGatewayToEnvokeLambda",
			"Type": "AWS::ApiGateway::Method",
			"Properties": {
				"AuthorizationType": "NONE",
				"ApiKeyRequired": true,
				"HttpMethod": "POST",
				"Integration": {
					"Type": "AWS",
					"IntegrationHttpMethod": "POST",
					"Uri": {
						"Fn::Join": ["", ["arn:aws:apigateway:", {
							"Ref": "AWS::Region"
						}, ":lambda:path/2015-03-31/functions/", {
							"Fn::GetAtt": ["HealthCheckLambda", "Arn"]
						}, "/invocations"]]
					},
					"IntegrationResponses": [{
						"StatusCode": 200
					}]
				},
				"ResourceId": {
					"Ref": "HealthCheckAPIResource"
				},
				"RestApiId": {
					"Ref": "HealthCheckAPI"
				},
				"MethodResponses": [{
					"StatusCode": 200
				}]
			}
		},
		"HealthCheckAPIUsagePlan": {
			"DependsOn": ["HealthCheckAPIDeployment"],
			"Type": "AWS::ApiGateway::UsagePlan",
			"Properties": {
				"ApiStages": [{
					"ApiId": {
						"Ref": "HealthCheckAPI"
					},
					"Stage": "prod"
				}],
				"Description": "HealthCheckAPIUsagePlan",
				"UsagePlanName": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-HealthCheckAPIUsagePlan"
						]
					]
				}
			}
		},
		"HealthCheckAPIUsagePlanKey": {
			"Type": "AWS::ApiGateway::UsagePlanKey",
			"Properties": {
				"KeyId": {
					"Ref": "HealthCheckAPIKey"
				},
				"KeyType": "API_KEY",
				"UsagePlanId": {
					"Ref": "HealthCheckAPIUsagePlan"
				}
			}
		},
		"HealthCheckAPIKey": {
			"Type": "AWS::ApiGateway::ApiKey",
			"DependsOn": ["HealthCheckAPIDeployment"],
			"Properties": {
				"Name": {
					"Fn::Join": [
						"", [{
								"Ref": "AWS::StackName"
							},
							"-HealthCheckAPIKey"
						]
					]
				},
				"Description": "HealthCheckAPIKey",
				"Enabled": "true",
				"StageKeys": [{
					"RestApiId": {
						"Ref": "HealthCheckAPI"
					},
					"StageName": "prod"
				}]
			}
		},
		"CloudWatchEventRule": {
			"Type": "AWS::Events::Rule",
			"Properties": {
				"Description": "CloudWatchEventRule",
				"ScheduleExpression": "rate(1 minute)",
				"State": "ENABLED",
				"Targets": [{
					"Arn": {
						"Fn::GetAtt": [
							"HealthCheckLambda",
							"Arn"
						]
					},
					"Id": "TargetFunctionV1"
				}]
			}
		},
		"HealthCheckLambda": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": [
				"HealthCheckLambdaRole",
				"HealthCheckLambdaPolicy"
			],
			"Properties": {
				"Code": {
					"S3Bucket": {
						"Fn::FindInMap": ["RegionMap", {
							"Ref": "AWS::Region"
						}, "LambdaCode"]
					},
					"S3Key": "healthcheck.zip"
				},
				"Environment": {
					"Variables": {
						"InstanceIPs": {
							"Fn::Join": [",", [{
								"Fn::GetAtt": ["FGTAENI1", "PrimaryPrivateIpAddress"]
							}, {
								"Fn::GetAtt": ["FGTBENI1", "PrimaryPrivateIpAddress"]
							}]]
						},
						"InstanceENIs": {
							"Fn::Join": [",", [{
								"Ref": "FGTAENI1"
							}, {
								"Ref": "FGTBENI1"
							}]]
						},
						"az1RouteTables": {
							"Ref": "AZ1PrivateRouteTable"
						},
						"az2RouteTables": {
							"Ref": "AZ2PrivateRouteTable"
						},
						"HealthCheckPort": {
							"Ref": "LambdaHealthCheckPort"
						}
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"HealthCheckLambdaRole",
						"Arn"
					]
				},
				"VpcConfig": {
					"SecurityGroupIds": [{
						"Ref": "LambdaSecGrp"
					}],
					"SubnetIds": [{
							"Ref": "PrivateSubnet1"
						},
						{
							"Ref": "PrivateSubnet2"
						}
					]
				},
				"Timeout": 60,
				"Handler": "healthcheck.lambda_handler",
				"Runtime": "python2.7",
				"MemorySize": 128
			}
		},
		"LambdaSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "LambdaSecGrp",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "-1",
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},
		"HealthCheckAPIRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": ["apigateway.amazonaws.com"]
						},
						"Action": ["sts:AssumeRole"]
					}]
				},
				"Policies": [{
					"PolicyName": "ApiGatewayLogsPolicy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:DescribeLogGroups",
								"logs:DescribeLogStreams",
								"logs:PutLogEvents",
								"logs:GetLogEvents",
								"logs:FilterLogEvents"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},
		"PermissionForAPIGatewayToEnvokeLambda": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"Action": "lambda:invokeFunction",
				"FunctionName": {
					"Fn::GetAtt": ["HealthCheckLambda", "Arn"]
				},
				"Principal": "apigateway.amazonaws.com",
				"SourceArn": {
					"Fn::Join": ["", ["arn:aws:execute-api:", {
						"Ref": "AWS::Region"
					}, ":", {
						"Ref": "AWS::AccountId"
					}, ":", {
						"Ref": "HealthCheckAPI"
					}, "/*"]]
				}
			}
		},
		"PermissionForEventsToInvokeLambda": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"FunctionName": {
					"Ref": "HealthCheckLambda"
				},
				"Action": "lambda:InvokeFunction",
				"Principal": "events.amazonaws.com",
				"SourceArn": {
					"Fn::GetAtt": [
						"CloudWatchEventRule",
						"Arn"
					]
				}
			}
		},
		"HealthCheckLambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/"
			}
		},
		"HealthCheckLambdaPolicy": {
			"DependsOn": [
				"HealthCheckLambdaRole"
			],
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "HealthCheckLambdaPolicy",
				"Roles": [{
					"Ref": "HealthCheckLambdaRole"
				}],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"logs:CreateLogGroup",
							"logs:CreateLogStream",
							"logs:PutLogEvents",
							"ec2:CreateNetworkInterface",
							"ec2:DescribeNetworkInterfaces",
							"ec2:DeleteNetworkInterface",
							"ec2:DescribeRouteTables",
							"ec2:ReplaceRoute"
						],
						"Resource": [
							"*"
						]
					}]
				}
			}
		}
	},
	"Outputs": {
		"FGTAURL": {
			"Value": {
				"Fn::Join": [
					"", [
						"https://", {
							"Ref": "FgtAEIP"
						}
					]
				]
			},
			"Description": "URL to access FortigateA"
		},
		"FGTUsername": {
			"Value": "admin",
			"Description": "Username to access Fortigates"
		},
		"FGTAPassword": {
			"Value": {
				"Ref": "FgtA"
			},
			"Description": "Password to access FortigateA"
		},
		"FGTBURL": {
			"Value": {
				"Fn::Join": [
					"", [
						"https://", {
							"Ref": "FgtBEIP"
						}
					]
				]
			},
			"Description": "URL to access FortigateB"
		},
		"FGTBPassword": {
			"Value": {
				"Ref": "FgtB"
			},
			"Description": "Password to access FortigateB"
		},
		"HealthCheckAPIURL": {
			"Description": "AWS API Gateway URL",
			"Value": {
				"Fn::Join": ["", ["https://", {
					"Ref": "HealthCheckAPI"
				}, ".execute-api.", {
					"Ref": "AWS::Region"
				}, ".amazonaws.com", "/prod/healthcheck"]]
			}
		},
		"HealthCheckAPIKeyID": {
			"Description": "AWS API Key ID (get key value from AWS console)",
			"Value": {
				"Ref": "HealthCheckAPIKey"
			}
		}
	}
}